name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/crawl4ai-mcp
  K8S_NAMESPACE: crawl4ai

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      
      - name: Generate package-lock.json
        run: npm install --package-lock-only
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix=,suffix=
            type=ref,event=branch
            type=ref,event=tag
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      
      - name: Verify ArgoCD server availability
        run: |
          max_retries=5
          retry_count=0
          while ! curl -sSf ${{ secrets.ARGOCD_SERVER }} > /dev/null; do
            if [ $retry_count -ge $max_retries ]; then
              echo "Failed to connect to ArgoCD server after $max_retries attempts"
              exit 1
            fi
            retry_count=$((retry_count + 1))
            echo "Waiting for ArgoCD server to be available (attempt $retry_count/$max_retries)..."
            sleep 5
          done
      
      - name: Login to ArgoCD
        run: |
          # Attempt login with retries
          max_retries=3
          retry_count=0
          while ! argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure \
            --grpc-web; do
            if [ $retry_count -ge $max_retries ]; then
              echo "Failed to login to ArgoCD after $max_retries attempts"
              exit 1
            fi
            retry_count=$((retry_count + 1))
            echo "Retrying ArgoCD login (attempt $retry_count/$max_retries)..."
            sleep 5
          done
          
          # Verify authentication
          if ! argocd account list; then
            echo "Failed to verify ArgoCD authentication"
            exit 1
          fi
      
      - name: Update deployment image
        run: |
          # Get current app details for verification
          if ! argocd app get ${{ secrets.ARGOCD_APP_NAME }}; then
            echo "Failed to get application details. Check if app exists and permissions are correct."
            exit 1
          fi
          
          # Create patch JSON
          PATCH='{"spec":{"source":{"kustomize":{"images":["'${{ env.DOCKER_IMAGE }}:${{ github.sha }}'"]}}}}'
          
          # Update image tag using kustomize
          if ! argocd app patch ${{ secrets.ARGOCD_APP_NAME }} --patch "$PATCH" --type merge; then
            echo "Failed to update image tag. Check application permissions."
            exit 1
          fi
          
          # Verify update
          if ! argocd app get ${{ secrets.ARGOCD_APP_NAME }} -o json | grep -q "${{ github.sha }}"; then
            echo "Failed to verify image tag update"
            exit 1
          fi
      
      - name: Sync ArgoCD application
        run: |
          # Sync with retry
          max_retries=3
          retry_count=0
          while ! argocd app sync ${{ secrets.ARGOCD_APP_NAME }} \
            --force \
            --prune \
            --retry-limit 3 \
            --timeout 300; do
            if [ $retry_count -ge $max_retries ]; then
              echo "Failed to sync application after $max_retries attempts"
              exit 1
            fi
            retry_count=$((retry_count + 1))
            echo "Retrying sync (attempt $retry_count/$max_retries)..."
            sleep 10
          done
          
          # Wait for health with retry
          max_retries=3
          retry_count=0
          while ! argocd app wait ${{ secrets.ARGOCD_APP_NAME }} \
            --health \
            --timeout 300; do
            if [ $retry_count -ge $max_retries ]; then
              echo "Application failed to become healthy after $max_retries attempts"
              exit 1
            fi
            retry_count=$((retry_count + 1))
            echo "Waiting for health (attempt $retry_count/$max_retries)..."
            sleep 10
          done 